// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mchirico/mock-playground/pkg/idea/imp (interfaces: IDEA)

// Package Mocks is a generated GoMock package.
package Mocks

import (
	gomock "github.com/golang/mock/gomock"
	imp "github.com/mchirico/mock-playground/pkg/idea/imp"
	reflect "reflect"
)

// MockIDEA is a mock of IDEA interface
type MockIDEA struct {
	ctrl     *gomock.Controller
	recorder *MockIDEAMockRecorder
}

// MockIDEAMockRecorder is the mock recorder for MockIDEA
type MockIDEAMockRecorder struct {
	mock *MockIDEA
}

// NewMockIDEA creates a new mock instance
func NewMockIDEA(ctrl *gomock.Controller) *MockIDEA {
	mock := &MockIDEA{ctrl: ctrl}
	mock.recorder = &MockIDEAMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDEA) EXPECT() *MockIDEAMockRecorder {
	return m.recorder
}

// Calls mocks base method
func (m *MockIDEA) Calls(arg0 map[string]string, arg1 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Calls", arg0, arg1)
}

// Calls indicates an expected call of Calls
func (mr *MockIDEAMockRecorder) Calls(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Calls", reflect.TypeOf((*MockIDEA)(nil).Calls), arg0, arg1)
}

// F mocks base method
func (m *MockIDEA) F(arg0 string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "F", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// F indicates an expected call of F
func (mr *MockIDEAMockRecorder) F(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "F", reflect.TypeOf((*MockIDEA)(nil).F), arg0)
}

// IdeaCheck mocks base method
func (m *MockIDEA) IdeaCheck(arg0 imp.IDEA, arg1 chan map[string]string, arg2 chan error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IdeaCheck", arg0, arg1, arg2)
}

// IdeaCheck indicates an expected call of IdeaCheck
func (mr *MockIDEAMockRecorder) IdeaCheck(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdeaCheck", reflect.TypeOf((*MockIDEA)(nil).IdeaCheck), arg0, arg1, arg2)
}

// Running mocks base method
func (m *MockIDEA) Running(arg0 string, arg1 bool, arg2 imp.IDEA) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Running", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Running indicates an expected call of Running
func (mr *MockIDEAMockRecorder) Running(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Running", reflect.TypeOf((*MockIDEA)(nil).Running), arg0, arg1, arg2)
}

// Start mocks base method
func (m *MockIDEA) Start(arg0 string, arg1 bool, arg2 imp.IDEA) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockIDEAMockRecorder) Start(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockIDEA)(nil).Start), arg0, arg1, arg2)
}
